<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Upload" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="campaignId" elementType="Argument">
            <stringProp name="Argument.name">campaignId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="campaignId1" elementType="Argument">
            <stringProp name="Argument.name">campaignId1</stringProp>
            <stringProp name="Argument.value">u22249586</stringProp>
            <stringProp name="Argument.desc">The id of the campaign</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="campaignId2" elementType="Argument">
            <stringProp name="Argument.name">campaignId2</stringProp>
            <stringProp name="Argument.value">u22417071</stringProp>
            <stringProp name="Argument.desc">anonymous</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="campaignId" elementType="Argument">
            <stringProp name="Argument.name">campaignId</stringProp>
            <stringProp name="Argument.value">u16720794</stringProp>
            <stringProp name="Argument.desc">not working</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="Property Display" enabled="true"/>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Upload File - Login" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Session" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">session.test.bbc.co.uk</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/session</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ExtractLoginLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">LOCATION</stringProp>
              <stringProp name="RegexExtractor.regex">Location:\s+(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="PostProcessor-SetLoginLocation" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager
loc = vars.get(&quot;LOCATION&quot;)
log.debug(&quot;LOCATION=&quot;+loc)
if (loc) {
	loc = new URL(loc)
	h = loc.getPath()+&quot;?&quot;+loc.query;
	props.put(&quot;LOGIN_PATH&quot;, h)
	props.put(&quot;LOGIN_HOST&quot;, loc.getHost())
	props.put(&quot;LOGIN_PROTOCOL&quot;, String.valueOf(loc.getProtocol()))

}

 
 

CookieManager manager = 
ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
props.put(&quot;cookiecount&quot;,String.valueOf(manager.getCookieCount()));
for (int i=0;i&lt;manager.getCookieCount();i++){
                 // code to convert Cookie information to JMeter Properties
    props.put(&quot;cookie_name_&quot; + i, manager.get(i).getName());
    props.put(&quot;cookie_value_&quot;+i, manager.get(i).getValue());
    props.put(&quot;cookie_domain_&quot;+i, manager.get(i).getDomain());
    props.put(&quot;cookie_path_&quot;+i, manager.get(i).getPath());
    props.put(&quot;cookie_expires_&quot;+i, String.valueOf(manager.get(i).getExpires())); 
    props.put(&quot;cookie_secure_&quot;+i, String.valueOf(manager.get(i).getSecure()));

}
 </stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor-ClearCookies" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.apache.jmeter.protocol.http.control.CookieManager;

log.debug(&quot;------------------- DING&quot;);
HTTPSamplerProxy hsp = ctx.getCurrentSampler();

hsp.setDomain(&quot;session.test.bbc.co.uk&quot;);
hsp.setPath(&quot;/session&quot;);
sampler.getCookieManager().getCookies().clear();
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ConfigTestElement guiclass="TCPConfigGui" testclass="ConfigTestElement" testname="TCP Sampler Config" enabled="true">
              <stringProp name="TCPSampler.server"></stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port"></stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request"></stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
            </ConfigTestElement>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ugc-under13-testuser1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">test4656</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(LOGIN_HOST)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${__property(LOGIN_PROTOCOL)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__property(LOGIN_PATH)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Fetch CKNS_ATKN and CKNS_IDTKN cookies" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.*
//Get cookie manager
CookieManager cm = sampler.getCookieManager()


int cc = cm.getCookieCount()
log.debug(&quot;************ NUMBER OF COOKIES&quot;+cc);
for(i =0; i &lt; cc; i++) {

	Cookie c = cm.get(i)
	log.debug(&quot;POSTING:******************** Cookies #&quot;+i+&quot;: &quot; + c.getName() + &quot;   - cookie Value: &quot; + c.getValue())	

	if (c.getName().equalsIgnoreCase(&quot;ckns_atkn&quot;)) {
		props.put(&quot;UGC_CKNSATKN&quot;, c.getValue());
		props.put(&quot;cookie_name_ckns_atkn&quot;, c.getName());
          props.put(&quot;cookie_value_ckns_atkn&quot;, c.getValue());
          props.put(&quot;cookie_domain_ckns_atkn&quot;, c.getDomain());
          props.put(&quot;cookie_path_ckns_atkn&quot;, c.getPath());
          props.put(&quot;cookie_expires_ckns_atkn&quot;, String.valueOf(c.getExpires())); 
          props.put(&quot;cookie_secure_ckns_atkn&quot;, String.valueOf(c.getSecure()));
	}

	if (c.getName().equalsIgnoreCase(&quot;ckns_idtkn&quot;)) {
		props.put(&quot;UGC_CKNSIDTKN&quot;, c.getValue());
		props.put(&quot;cookie_name_ckns_idtkn&quot;, c.getName());
          props.put(&quot;cookie_value_ckns_idtkn&quot;, c.getValue());
          props.put(&quot;cookie_domain_ckns_idtkn&quot;, c.getDomain());
          props.put(&quot;cookie_path_ckns_idtkn&quot;, c.getPath());
          props.put(&quot;cookie_expires_ckns_idtkn&quot;, String.valueOf(c.getExpires())); 
          props.put(&quot;cookie_secure_ckns_idtkn&quot;, String.valueOf(c.getSecure()));
	}
	
	if (c.getName().equalsIgnoreCase(&quot;ckns_id-session-redirect&quot;)){
		props.put(&quot;UGC_ckns_id-session-redirect&quot;, c.getValue());
		props.put(&quot;UGC_ckns_id-session-redirect_DOMAIN&quot;, c.getDomain());
	}

}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1648040284">500|302|200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload-Login" enabled="false">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${__P(test.data,&quot;hmm&quot;)}/1600px-Snake_River_5MB.jpg" elementType="HTTPFileArg">
                  <stringProp name="File.path">${__P(test.data,&quot;hmm&quot;)}/1600px-Snake_River_5MB.jpg</stringProp>
                  <stringProp name="File.paramname">data</stringProp>
                  <stringProp name="File.mimetype">image/jpeg</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="txt10930738" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">email</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">txt10930738</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.int.bbc.co.uk</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ugc/send/${campaignId}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SubmissionId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">subId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.submissionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${__P(test.results,&quot;hmm&quot;)}/upload.json</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname=" PreProcessor-AddAuthenticationCookies" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//sampler.setProtocol(vars.get(&quot;LOGION_PROTOCOL&quot;))
//sampler.setDomain(vars.get(&quot;LOGIN_DOMAIN&quot;))
//sampler.setPath(vars.get(&quot;LOGIN_PATH&quot;))
//log.info(&quot;----- BEFORE LOGIN ${__property(UGC_CKNS_MVT)}&quot;)
import org.apache.jmeter.protocol.http.control.CookieManager;

import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
count = Integer.parseInt(props.getProperty(&quot;cookiecount&quot;));

       Cookie cknsIdtkCookie = new
		Cookie(
			props.getProperty(&quot;cookie_name_ckns_idtkn&quot;),
			props.getProperty(&quot;cookie_value_ckns_idtkn&quot;), 
			props.getProperty(&quot;cookie_domain_ckns_idtkn&quot;),
			props.getProperty(&quot;cookie_path_ckns_idtkn&quot;), 
			Boolean.parseBoolean(props.getProperty(&quot;cookie_secure_ckns_idtkn&quot;)), 
			Long.parseLong(props.getProperty(&quot;cookie_expires_ckns_idtkn&quot;))
			);

	
	manager.add(cknsIdtkCookie);

	      Cookie cknsAtknCookie = new
		Cookie(
			props.getProperty(&quot;cookie_name_ckns_atkn&quot;),
			props.getProperty(&quot;cookie_value_ckns_atkn&quot;), 
			props.getProperty(&quot;cookie_domain_ckns_atkn&quot;),
			props.getProperty(&quot;cookie_path_ckns_atkn&quot;), 
			Boolean.parseBoolean(props.getProperty(&quot;cookie_secure_ckns_atkn&quot;)), 
			Long.parseLong(props.getProperty(&quot;cookie_expires_ckns_atkn&quot;))
			);

	
	manager.add(cknsAtknCookie);
	
JMeterProperty cookieprop = 
ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;);
cookieprop.setObjectValue(manager);

//ctx.getCurrentSampler().setProperty(myprop);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="testName" elementType="Argument">
                <stringProp name="Argument.name">testName</stringProp>
                <stringProp name="Argument.value">UgcUploadTest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeName" elementType="Argument">
                <stringProp name="Argument.name">nodeName</stringProp>
                <stringProp name="Argument.value">Test-Node</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBHost" elementType="Argument">
                <stringProp name="Argument.name">influxDBHost</stringProp>
                <stringProp name="Argument.value">influxdb-jmeter.ugcload-reporter.svc.cluster.local</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBPort" elementType="Argument">
                <stringProp name="Argument.name">influxDBPort</stringProp>
                <stringProp name="Argument.value">8086</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBUser" elementType="Argument">
                <stringProp name="Argument.name">influxDBUser</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBPassword" elementType="Argument">
                <stringProp name="Argument.name">influxDBPassword</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBDatabase" elementType="Argument">
                <stringProp name="Argument.name">influxDBDatabase</stringProp>
                <stringProp name="Argument.value">ugcloadtest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="retentionPolicy" elementType="Argument">
                <stringProp name="Argument.name">retentionPolicy</stringProp>
                <stringProp name="Argument.value">autogen</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="useRegexForSamplerList" elementType="Argument">
                <stringProp name="Argument.name">useRegexForSamplerList</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">rocks.nt.apm.jmeter.JMeterInfluxDBBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Upload File" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Session" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">session.test.bbc.co.uk</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/session</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ExtractLoginLocation" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">LOCATION</stringProp>
              <stringProp name="RegexExtractor.regex">Location:\s+(.+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="PostProcessor-SetLoginLocation" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager
loc = vars.get(&quot;LOCATION&quot;)
if (loc) {
	loc = new URL(loc)
	h = loc.getPath()+&quot;?&quot;+loc.query;
	props.put(&quot;LOGIN_PATH&quot;, h)
	props.put(&quot;LOGIN_HOST&quot;, loc.getHost())
	props.put(&quot;LOGIN_PROTOCOL&quot;, String.valueOf(loc.getProtocol()))

}

 
 

CookieManager manager = 
ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
props.put(&quot;cookiecount&quot;,String.valueOf(manager.getCookieCount()));
for (int i=0;i&lt;manager.getCookieCount();i++){
                 // code to convert Cookie information to JMeter Properties
    props.put(&quot;cookie_name_&quot; + i, manager.get(i).getName());
    props.put(&quot;cookie_value_&quot;+i, manager.get(i).getValue());
    props.put(&quot;cookie_domain_&quot;+i, manager.get(i).getDomain());
    props.put(&quot;cookie_path_&quot;+i, manager.get(i).getPath());
    props.put(&quot;cookie_expires_&quot;+i, String.valueOf(manager.get(i).getExpires())); 
    props.put(&quot;cookie_secure_&quot;+i, String.valueOf(manager.get(i).getSecure()));

}
 </stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ugc-under13-testuser1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">test4656</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__property(LOGIN_HOST)}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${__property(LOGIN_PROTOCOL)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__property(LOGIN_PATH)}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Fetch CKNS_ATKN and CKNS_IDTKN cookies" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.protocol.http.control.*
//Get cookie manager
CookieManager cm = sampler.getCookieManager()


int cc = cm.getCookieCount()
log.info(&quot;************ NUMBER OF COOKIES&quot;+cc);
for(i =0; i &lt; cc; i++) {

	Cookie c = cm.get(i)
	log.info(&quot;POSTING:******************** Cookies #&quot;+i+&quot;: &quot; + c.getName() + &quot;   - cookie Value: &quot; + c.getValue())	

	if (c.getName().equalsIgnoreCase(&quot;ckns_atkn&quot;)) {
		props.put(&quot;UGC_CKNSATKN&quot;, c.getValue());
		props.put(&quot;cookie_name_ckns_atkn&quot;, c.getName());
          props.put(&quot;cookie_value_ckns_atkn&quot;, c.getValue());
          props.put(&quot;cookie_domain_ckns_atkn&quot;, c.getDomain());
          props.put(&quot;cookie_path_ckns_atkn&quot;, c.getPath());
          props.put(&quot;cookie_expires_ckns_atkn&quot;, String.valueOf(c.getExpires())); 
          props.put(&quot;cookie_secure_ckns_atkn&quot;, String.valueOf(c.getSecure()));
	}

	if (c.getName().equalsIgnoreCase(&quot;ckns_idtkn&quot;)) {
		props.put(&quot;UGC_CKNSIDTKN&quot;, c.getValue());
		props.put(&quot;cookie_name_ckns_idtkn&quot;, c.getName());
          props.put(&quot;cookie_value_ckns_idtkn&quot;, c.getValue());
          props.put(&quot;cookie_domain_ckns_idtkn&quot;, c.getDomain());
          props.put(&quot;cookie_path_ckns_idtkn&quot;, c.getPath());
          props.put(&quot;cookie_expires_ckns_idtkn&quot;, String.valueOf(c.getExpires())); 
          props.put(&quot;cookie_secure_ckns_idtkn&quot;, String.valueOf(c.getSecure()));

	}

	if (c.getName().equalsIgnoreCase(&quot;ckns_mvt&quot;)){
		log.info(&quot;SETTING&quot;);
		props.put(&quot;UGC_CKNS_MVT&quot;, c.getValue());
		props.put(&quot;UGC_CKNS_MVT_DOMAIN&quot;, c.getDomain());
	}
	
	if (c.getName().equalsIgnoreCase(&quot;ckns_nonce&quot;)){

		props.put(&quot;UGC_CKNS_NONCE&quot;, c.getValue());
		props.put(&quot;UGC_CKNS_NONCE_DOMAIN&quot;, c.getDomain());
	}

	
	if (c.getName().equalsIgnoreCase(&quot;ckns_id-session-redirect&quot;)){

		props.put(&quot;UGC_ckns_id-session-redirect&quot;, c.getValue());
		props.put(&quot;UGC_ckns_id-session-redirect_DOMAIN&quot;, c.getDomain());
	}

	


}
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1648040284">500|302|200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Preprocessor-AddSessionCookie" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//sampler.setProtocol(vars.get(&quot;LOGION_PROTOCOL&quot;))
//sampler.setDomain(vars.get(&quot;LOGIN_DOMAIN&quot;))
//sampler.setPath(vars.get(&quot;LOGIN_PATH&quot;))
//log.info(&quot;----- BEFORE LOGIN ${__property(UGC_CKNS_MVT)}&quot;)
import org.apache.jmeter.protocol.http.control.CookieManager;

import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
CookieManager manager =

ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
count = Integer.parseInt(props.getProperty(&quot;cookiecount&quot;));

for (int i=0; i&lt;count; i++) {
//	  log.info(&quot;----INSIDE &quot;+props.getProperty(&quot;cookie_name_&quot;+i);
 
       Cookie cookie = new
		Cookie(
			props.getProperty(&quot;cookie_name_&quot;+i),
			props.getProperty(&quot;cookie_value_&quot;+i), 
			props.getProperty(&quot;cookie_domain_&quot;+i),
			props.getProperty(&quot;cookie_path_&quot;+i), 
			Boolean.parseBoolean(props.getProperty(&quot;cookie_secure_&quot;+i)), 
			Long.parseLong(props.getProperty(&quot;cookie_expires_&quot;+i))
			);

	
	manager.add(cookie);
}
JMeterProperty cookieprop = 
ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;);
cookieprop.setObjectValue(manager);

//ctx.getCurrentSampler().setProperty(myprop);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload-Login" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${__P(test.data,&quot;hmm&quot;)}/1600px-Snake_River_5MB.jpg" elementType="HTTPFileArg">
                  <stringProp name="File.path">${__P(test.data,&quot;hmm&quot;)}/1600px-Snake_River_5MB.jpg</stringProp>
                  <stringProp name="File.paramname">data</stringProp>
                  <stringProp name="File.mimetype">image/jpeg</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="txt10930738" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">email</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">txt10930738</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.int.bbc.co.uk</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ugc/send/${campaignId}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SubmissionId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">subId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.submissionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${__P(test.results,&quot;hmm&quot;)}/upload.json</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname=" PreProcessor-AddAuthenticationCookies" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//sampler.setProtocol(vars.get(&quot;LOGION_PROTOCOL&quot;))
//sampler.setDomain(vars.get(&quot;LOGIN_DOMAIN&quot;))
//sampler.setPath(vars.get(&quot;LOGIN_PATH&quot;))
//log.info(&quot;----- BEFORE LOGIN ${__property(UGC_CKNS_MVT)}&quot;)
import org.apache.jmeter.protocol.http.control.CookieManager;

import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
CookieManager manager =

ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
count = Integer.parseInt(props.getProperty(&quot;cookiecount&quot;));

       Cookie cknsIdtkCookie = new
		Cookie(
			props.getProperty(&quot;cookie_name_ckns_idtkn&quot;),
			props.getProperty(&quot;cookie_value_ckns_idtkn&quot;), 
			props.getProperty(&quot;cookie_domain_ckns_idtkn&quot;),
			props.getProperty(&quot;cookie_path_ckns_idtkn&quot;), 
			Boolean.parseBoolean(props.getProperty(&quot;cookie_secure_ckns_idtkn&quot;)), 
			Long.parseLong(props.getProperty(&quot;cookie_expires_ckns_idtkn&quot;))
			);

	
	manager.add(cknsIdtkCookie);

	      Cookie cknsAtknCookie = new
		Cookie(
			props.getProperty(&quot;cookie_name_ckns_atkn&quot;),
			props.getProperty(&quot;cookie_value_ckns_atkn&quot;), 
			props.getProperty(&quot;cookie_domain_ckns_atkn&quot;),
			props.getProperty(&quot;cookie_path_ckns_atkn&quot;), 
			Boolean.parseBoolean(props.getProperty(&quot;cookie_secure_ckns_atkn&quot;)), 
			Long.parseLong(props.getProperty(&quot;cookie_expires_ckns_atkn&quot;))
			);

	
	manager.add(cknsAtknCookie);
	
JMeterProperty cookieprop = 
ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;);
cookieprop.setObjectValue(manager);

//ctx.getCurrentSampler().setProperty(myprop);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="testName" elementType="Argument">
                <stringProp name="Argument.name">testName</stringProp>
                <stringProp name="Argument.value">ugc-testname</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeName" elementType="Argument">
                <stringProp name="Argument.name">nodeName</stringProp>
                <stringProp name="Argument.value">ugc-nodename</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBHost" elementType="Argument">
                <stringProp name="Argument.name">influxDBHost</stringProp>
                <stringProp name="Argument.value">127.0.0.1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBPort" elementType="Argument">
                <stringProp name="Argument.name">influxDBPort</stringProp>
                <stringProp name="Argument.value">8086</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBUser" elementType="Argument">
                <stringProp name="Argument.name">influxDBUser</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBPassword" elementType="Argument">
                <stringProp name="Argument.name">influxDBPassword</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBDatabase" elementType="Argument">
                <stringProp name="Argument.name">influxDBDatabase</stringProp>
                <stringProp name="Argument.value">ugcloadtest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="retentionPolicy" elementType="Argument">
                <stringProp name="Argument.name">retentionPolicy</stringProp>
                <stringProp name="Argument.value">autogen</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="useRegexForSamplerList" elementType="Argument">
                <stringProp name="Argument.name">useRegexForSamplerList</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">rocks.nt.apm.jmeter.JMeterInfluxDBBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Upload File - Login  Once Only" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Login Only Once" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Session" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">session.test.bbc.co.uk</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/session</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ExtractLoginLocation" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">LOCATION</stringProp>
                <stringProp name="RegexExtractor.regex">Location:\s+(.+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="PostProcessor-SetLoginLocation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.CookieManager
loc = vars.get(&quot;LOCATION&quot;)
log.info(&quot;LOCATION=&quot;+loc)
if (loc) {
	loc = new URL(loc)
	h = loc.getPath()+&quot;?&quot;+loc.query;
	props.put(&quot;LOGIN_PATH&quot;, h)
	props.put(&quot;LOGIN_HOST&quot;, loc.getHost())
	props.put(&quot;LOGIN_PROTOCOL&quot;, String.valueOf(loc.getProtocol()))

}

 
 

CookieManager manager = 
ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
props.put(&quot;cookiecount&quot;,String.valueOf(manager.getCookieCount()));
for (int i=0;i&lt;manager.getCookieCount();i++){
                 // code to convert Cookie information to JMeter Properties
    props.put(&quot;cookie_name_&quot; + i, manager.get(i).getName());
    props.put(&quot;cookie_value_&quot;+i, manager.get(i).getValue());
    props.put(&quot;cookie_domain_&quot;+i, manager.get(i).getDomain());
    props.put(&quot;cookie_path_&quot;+i, manager.get(i).getPath());
    props.put(&quot;cookie_expires_&quot;+i, String.valueOf(manager.get(i).getExpires())); 
    props.put(&quot;cookie_secure_&quot;+i, String.valueOf(manager.get(i).getSecure()));

}
 </stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">sampler.getCookieManager().getCookies().clear();
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
import org.apache.jmeter.protocol.http.control.CookieManager;

log.info(&quot;------------------- DING&quot;);
HTTPSamplerProxy hsp = ctx.getCurrentSampler();

hsp.setDomain(&quot;session.test.bbc.co.uk&quot;);
hsp.setPath(&quot;/session&quot;);
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
manager.recoverRunningVersion();
int cnt = manager.getCookieCount();
log.info(&quot;count = &quot;+cnt);
for(int i =0; i &lt; (cnt); i++){
	 log.info(&quot;---Hey:&quot;+manager.get(i).getName()+&quot;i=&quot;+i);
	 /*
	 try {
	 manager.remove(i);
	 } catch( javax.script.ScriptException e) {
	 	log.error(&quot;can not remove&quot;, e);
	 }
	 */
}


</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="username" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ugc-under13-testuser1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">username</stringProp>
                    <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">test4656</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="HTTPArgument.content_type">application/x-www-form-urlencoded</stringProp>
                    <stringProp name="Argument.name">password</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__property(LOGIN_HOST)}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${__property(LOGIN_PROTOCOL)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__property(LOGIN_PATH)}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Fetch CKNS_ATKN and CKNS_IDTKN cookies" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import org.apache.jmeter.protocol.http.control.*
//Get cookie manager
CookieManager cm = sampler.getCookieManager()


int cc = cm.getCookieCount()
log.info(&quot;************ NUMBER OF COOKIES&quot;+cc);
for(i =0; i &lt; cc; i++) {

	Cookie c = cm.get(i)
	log.info(&quot;POSTING:******************** Cookies #&quot;+i+&quot;: &quot; + c.getName() + &quot;   - cookie Value: &quot; + c.getValue())	

	if (c.getName().equalsIgnoreCase(&quot;ckns_atkn&quot;)) {
		props.put(&quot;UGC_CKNSATKN&quot;, c.getValue());
		props.put(&quot;cookie_name_ckns_atkn&quot;, c.getName());
          props.put(&quot;cookie_value_ckns_atkn&quot;, c.getValue());
          props.put(&quot;cookie_domain_ckns_atkn&quot;, c.getDomain());
          props.put(&quot;cookie_path_ckns_atkn&quot;, c.getPath());
          props.put(&quot;cookie_expires_ckns_atkn&quot;, String.valueOf(c.getExpires())); 
          props.put(&quot;cookie_secure_ckns_atkn&quot;, String.valueOf(c.getSecure()));
	}

	if (c.getName().equalsIgnoreCase(&quot;ckns_idtkn&quot;)) {
		props.put(&quot;UGC_CKNSIDTKN&quot;, c.getValue());
		props.put(&quot;cookie_name_ckns_idtkn&quot;, c.getName());
          props.put(&quot;cookie_value_ckns_idtkn&quot;, c.getValue());
          props.put(&quot;cookie_domain_ckns_idtkn&quot;, c.getDomain());
          props.put(&quot;cookie_path_ckns_idtkn&quot;, c.getPath());
          props.put(&quot;cookie_expires_ckns_idtkn&quot;, String.valueOf(c.getExpires())); 
          props.put(&quot;cookie_secure_ckns_idtkn&quot;, String.valueOf(c.getSecure()));

	}
	
	if (c.getName().equalsIgnoreCase(&quot;ckns_id-session-redirect&quot;)){

		props.put(&quot;UGC_ckns_id-session-redirect&quot;, c.getValue());
		props.put(&quot;UGC_ckns_id-session-redirect_DOMAIN&quot;, c.getDomain());
	}

}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1648040284">500|302|200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Preprocessor-AddSessionCookie" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//sampler.setProtocol(vars.get(&quot;LOGION_PROTOCOL&quot;))
//sampler.setDomain(vars.get(&quot;LOGIN_DOMAIN&quot;))
//sampler.setPath(vars.get(&quot;LOGIN_PATH&quot;))
//log.info(&quot;----- BEFORE LOGIN ${__property(UGC_CKNS_MVT)}&quot;)
import org.apache.jmeter.protocol.http.control.CookieManager;

import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
count = Integer.parseInt(props.getProperty(&quot;cookiecount&quot;));

for (int i=0; i&lt;count; i++) {
//	  log.info(&quot;----INSIDE &quot;+props.getProperty(&quot;cookie_name_&quot;+i);
 
       Cookie cookie = new
		Cookie(
			props.getProperty(&quot;cookie_name_&quot;+i),
			props.getProperty(&quot;cookie_value_&quot;+i), 
			props.getProperty(&quot;cookie_domain_&quot;+i),
			props.getProperty(&quot;cookie_path_&quot;+i), 
			Boolean.parseBoolean(props.getProperty(&quot;cookie_secure_&quot;+i)), 
			Long.parseLong(props.getProperty(&quot;cookie_expires_&quot;+i))
			);

	
	manager.add(cookie);
}
JMeterProperty cookieprop = 
ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;);
cookieprop.setObjectValue(manager);

//ctx.getCurrentSampler().setProperty(myprop);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload-Login" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="${__P(test.data,&quot;hmm&quot;)}/1600px-Snake_River_5MB.jpg" elementType="HTTPFileArg">
                  <stringProp name="File.path">${__P(test.data,&quot;hmm&quot;)}/1600px-Snake_River_5MB.jpg</stringProp>
                  <stringProp name="File.paramname">data</stringProp>
                  <stringProp name="File.mimetype">image/jpeg</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="txt10930738" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">email</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">txt10930738</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.int.bbc.co.uk</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">ugc/send/${campaignId}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SubmissionId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">subId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.submissionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Sample.scope">variable</stringProp>
              <stringProp name="Scope.variable"></stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="true">
              <stringProp name="FileSaver.filename">${__P(test.results,&quot;hmm&quot;)}/upload.json</stringProp>
              <boolProp name="FileSaver.errorsonly">false</boolProp>
              <boolProp name="FileSaver.successonly">false</boolProp>
              <boolProp name="FileSaver.skipsuffix">false</boolProp>
              <boolProp name="FileSaver.skipautonumber">false</boolProp>
            </ResultSaver>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname=" PreProcessor-AddAuthenticationCookies" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//sampler.setProtocol(vars.get(&quot;LOGION_PROTOCOL&quot;))
//sampler.setDomain(vars.get(&quot;LOGIN_DOMAIN&quot;))
//sampler.setPath(vars.get(&quot;LOGIN_PATH&quot;))
//log.info(&quot;----- BEFORE LOGIN ${__property(UGC_CKNS_MVT)}&quot;)
import org.apache.jmeter.protocol.http.control.CookieManager;

import org.apache.jmeter.protocol.http.control.Cookie;
import org.apache.jmeter.testelement.property.JMeterProperty;
CookieManager manager = ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;).getObjectValue();
count = Integer.parseInt(props.getProperty(&quot;cookiecount&quot;));

       Cookie cknsIdtkCookie = new
		Cookie(
			props.getProperty(&quot;cookie_name_ckns_idtkn&quot;),
			props.getProperty(&quot;cookie_value_ckns_idtkn&quot;), 
			props.getProperty(&quot;cookie_domain_ckns_idtkn&quot;),
			props.getProperty(&quot;cookie_path_ckns_idtkn&quot;), 
			Boolean.parseBoolean(props.getProperty(&quot;cookie_secure_ckns_idtkn&quot;)), 
			Long.parseLong(props.getProperty(&quot;cookie_expires_ckns_idtkn&quot;))
			);

	
	manager.add(cknsIdtkCookie);

	      Cookie cknsAtknCookie = new
		Cookie(
			props.getProperty(&quot;cookie_name_ckns_atkn&quot;),
			props.getProperty(&quot;cookie_value_ckns_atkn&quot;), 
			props.getProperty(&quot;cookie_domain_ckns_atkn&quot;),
			props.getProperty(&quot;cookie_path_ckns_atkn&quot;), 
			Boolean.parseBoolean(props.getProperty(&quot;cookie_secure_ckns_atkn&quot;)), 
			Long.parseLong(props.getProperty(&quot;cookie_expires_ckns_atkn&quot;))
			);

	
	manager.add(cknsAtknCookie);
	
JMeterProperty cookieprop = 
ctx.getCurrentSampler().getProperty(&quot;HTTPSampler.cookie_manager&quot;);
cookieprop.setObjectValue(manager);

//ctx.getCurrentSampler().setProperty(myprop);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="testName" elementType="Argument">
                <stringProp name="Argument.name">testName</stringProp>
                <stringProp name="Argument.value">ugc-testname</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nodeName" elementType="Argument">
                <stringProp name="Argument.name">nodeName</stringProp>
                <stringProp name="Argument.value">ugc-nodename</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBHost" elementType="Argument">
                <stringProp name="Argument.name">influxDBHost</stringProp>
                <stringProp name="Argument.value">127.0.0.1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBPort" elementType="Argument">
                <stringProp name="Argument.name">influxDBPort</stringProp>
                <stringProp name="Argument.value">8086</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBUser" elementType="Argument">
                <stringProp name="Argument.name">influxDBUser</stringProp>
                <stringProp name="Argument.value">jmeter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBPassword" elementType="Argument">
                <stringProp name="Argument.name">influxDBPassword</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="influxDBDatabase" elementType="Argument">
                <stringProp name="Argument.name">influxDBDatabase</stringProp>
                <stringProp name="Argument.value">ugcloadtest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="retentionPolicy" elementType="Argument">
                <stringProp name="Argument.name">retentionPolicy</stringProp>
                <stringProp name="Argument.value">autogen</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="samplersList" elementType="Argument">
                <stringProp name="Argument.name">samplersList</stringProp>
                <stringProp name="Argument.value">.*</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="useRegexForSamplerList" elementType="Argument">
                <stringProp name="Argument.name">useRegexForSamplerList</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">rocks.nt.apm.jmeter.JMeterInfluxDBBackendListenerClient</stringProp>
        </BackendListener>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
